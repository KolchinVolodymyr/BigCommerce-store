{
  "name": "Product All Sale",
  "schema": [{
    "type": "tab",
    "label": "Content",
    "sections": []
  },
    {}],
  "template": "<div style=\"max-width: 1600px;margin: 0 auto;\"><section id=\"productCarousel\" class=\"productCarousel\"></section></div><style>@media (min-width: 1200px){#productCarousel{padding:0 0px;}}.slider_wrap * {box-sizing:border-box;-moz-box-sizing: border-box;-webkit-box-sizing: border-box;}.slick-slide { margin: 0 10px; padding: 0 10px}.slider-item img { max-width: 100%;} .prodTitle{margin-bottom:0px}</style><script src='/content/widget/jquery.min.js'></script><script src='/content/widget/slick.js'></script><script>let jsContext_token = document.getElementById('BC_GraphQL_Token').innerText.trim().slice(1,-1);let products = [];let cursor;function initSlick() { $('#productCarousel').slick({ infinite: true, adaptiveHeight: true, slidesToShow: 4, slidesToScroll: 1, autoplay: false, autoplaySpeed: 10000, responsive: [{ breakpoint: 801, settings: { arrows: false,slidesToShow: 1 } }] });} function renderHtml(products) {let appNode = document.getElementById('productCarousel');products.forEach(element => { if (element.node.prices.salePrice != null) {let newNode = document.createElement(\"div\"); newNode.innerHTML += `<a style=\"text-decoration:none\" href=\"${element.node.path}\" data-productcustom-slide><div><img src=\"${element.node.defaultImage.url}\"><h3 class=\"card-title\">${element.node.name}</h3><div><p class=\"prodTitle\">Was <span style=\"text-decoration: line-through;\">${element.node.prices.basePrice.value}</span></p><p>Now ${element.node.prices.salePrice.value}</p></div></div></a>`;appNode.append(newNode); }; });initSlick()}async function getListProducts(cursor) { const response = await fetch('/graphql', { method: 'POST', credentials: 'same-origin', headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${jsContext_token}` }, body: JSON.stringify({ query: `query Product($cursor: String) { site { products(first:3, after: $cursor) { pageInfo { endCursor  hasNextPage } edges { node { name path entityId createdAt{utc} prices{ price { currencyCode value } salePrice { currencyCode value } basePrice { currencyCode value }} defaultImage { url(width: 500, height: 500) } } } } } }`, variables: { cursor: cursor }, }) }).then(res => res.json()).then(response => { return response }); const data = response; products = [...products, ...response.data.site.products.edges]; await response; if (response.data.site.products.pageInfo.hasNextPage) { return getListProducts(response.data.site.products.pageInfo.endCursor); } else { return renderHtml(products); }; }getListProducts(cursor);</script>"
}